(function(){"use strict";var e={6481:function(e,t,a){var r=a(5471),s=a(5668),n=function(){var e=this,t=e._self._c;return t(s.A,[t("router-view")],1)},o=[],c={name:"App"},d=c,l=a(1656),u=(0,l.A)(d,n,o,!1,null,null,null),i=u.exports,E=a(173),R=a(5353),h=(a(4114),a(4335));const S="/api/v1",m=h.A.create({baseURL:S});m.interceptors.request.use((e=>{const t=localStorage.getItem("token");return t&&(e.headers.Authorization=`Bearer ${t}`),e}),(e=>Promise.reject(e))),m.interceptors.response.use((e=>e),(e=>(401===e.response?.status&&localStorage.removeItem("token"),Promise.reject(e))));var T=m,_={login(e){return T.post("/auth/login",e)},register(e){return T.post("/user",e)},getCurrentUser(){return T.get("/auth/me")}},p={namespaced:!0,state:{token:localStorage.getItem("token")||null,user:null,loading:!1,error:null},getters:{isAuthenticated:e=>!!e.token,user:e=>e.user,loading:e=>e.loading,error:e=>e.error},mutations:{SET_TOKEN(e,t){e.token=t},SET_USER(e,t){e.user=t},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_AUTH(e){e.token=null,e.user=null,e.error=null}},actions:{async login({commit:e},t){try{e("SET_LOADING",!0);const a=await _.login(t),{token:r,user:s}=a.data.data;localStorage.setItem("token",r),localStorage.setItem("user",JSON.stringify({_id:s._id})),e("SET_TOKEN",r),e("SET_USER",s),J.push("/dashboard")}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Login failed"),a}finally{e("SET_LOADING",!1)}},logout({commit:e}){localStorage.removeItem("token"),localStorage.removeItem("user"),e("CLEAR_AUTH"),J.push("/login")}}},f={getUsers(){return T.get("/user")},getUser(e){return T.get(`/user/${e}`)},getUserByEmail(e){return T.get(`/user/email/${e}`)},getUsersByRole(e){return T.get(`/user/role/${e}`)},createUser(e){return T.post("/user",e)},updateUser(e,t){return T.patch(`/user/${e}`,t)},deleteUser(e){return T.delete(`/user/${e}`)},toggleUserStatus(e){return T.patch(`/user/${e}/toggle-status`)}},g={namespaced:!0,state:{users:[],currentUser:null,loading:!1,error:null},getters:{users:e=>e.users,currentUser:e=>e.currentUser,loading:e=>e.loading,error:e=>e.error},mutations:{SET_USERS(e,t){e.users=t},SET_CURRENT_USER(e,t){e.currentUser=t},ADD_USER(e,t){e.users.push(t)},UPDATE_USER(e,t){const a=e.users.findIndex((e=>e._id===t._id));-1!==a&&e.users.splice(a,1,t)},REMOVE_USER(e,t){e.users=e.users.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_ERROR(e){e.error=null}},actions:{async fetchUsers({commit:e}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const t=await f.getUsers();console.log(t.data.data.users),e("SET_USERS",t.data.data.users)}catch(t){throw e("SET_ERROR",t.response?.data?.message||"Failed to fetch users"),t}finally{e("SET_LOADING",!1)}},async fetchUser({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await f.getUser(t);return e("SET_CURRENT_USER",a.data.data.user),a.data.data.user}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch user"),a}finally{e("SET_LOADING",!1)}},async createUser({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await f.createUser(t);return e("ADD_USER",a.data.data.user),a.data.data.user}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to create user"),a}finally{e("SET_LOADING",!1)}},async updateUser({commit:e},{id:t,userData:a}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const r=await f.updateUser(t,a);return e("UPDATE_USER",r.data.data.user),r.data.data.user}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to update user"),r}finally{e("SET_LOADING",!1)}},async deleteUser({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR"),await f.deleteUser(t),e("REMOVE_USER",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to delete user"),a}finally{e("SET_LOADING",!1)}},async getUser({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await f.getUser(t);return a.data.data.user}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch user"),a}finally{e("SET_LOADING",!1)}},async getUserByEmail({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await f.getUserByEmail(t);return a.data.data.user}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch user"),a}finally{e("SET_LOADING",!1)}},async getUsersByRole({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await f.getUsersByRole(t);return e("SET_USERS",a.data.data.users),a.data.data.users}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch users"),a}finally{e("SET_LOADING",!1)}},async toggleUserStatus({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await f.toggleUserStatus(t);return e("UPDATE_USER",a.data.data.user),a.data.data.user}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to toggle user status"),a}finally{e("SET_LOADING",!1)}}}},O={getDashboardData(){return T.get("/dashboard/data")},getRecentActivities(){return T.get("/dashboard/activities")},getWeeklyAttendance(){return T.get("/dashboard/weekly-attendance")},getClassDistribution(){return T.get("/dashboard/class-distribution")}},A={namespaced:!0,state:{dashboardData:null,recentActivities:[],weeklyAttendance:[],classDistribution:[],loading:!1,error:null},getters:{totalStudents:e=>e.dashboardData?.studentCount||0,totalTeachers:e=>e.dashboardData?.teacherCount||0,totalClasses:e=>e.dashboardData?.classCount||0,attendanceRate:e=>e.dashboardData?.attendanceRate||0,isLoading:e=>e.loading},mutations:{SET_DASHBOARD_DATA(e,t){e.dashboardData=t},SET_RECENT_ACTIVITIES(e,t){e.recentActivities=t},SET_WEEKLY_ATTENDANCE(e,t){e.weeklyAttendance=t},SET_CLASS_DISTRIBUTION(e,t){e.classDistribution=t},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t}},actions:{async fetchDashboardData({commit:e}){e("SET_LOADING",!0);try{const{data:t}=await O.getDashboardData();return console.log(t),e("SET_DASHBOARD_DATA",t.data),t}catch(t){throw e("SET_ERROR",t.message),t}finally{e("SET_LOADING",!1)}},async fetchRecentActivities({commit:e}){try{const{data:t}=await O.getRecentActivities();return e("SET_RECENT_ACTIVITIES",t),t}catch(t){throw e("SET_ERROR",t.message),t}},async fetchWeeklyAttendance({commit:e}){try{const{data:t}=await O.getWeeklyAttendance();return e("SET_WEEKLY_ATTENDANCE",t),t}catch(t){throw e("SET_ERROR",t.message),t}},async fetchClassDistribution({commit:e}){try{const{data:t}=await O.getClassDistribution();return e("SET_CLASS_DISTRIBUTION",t),t}catch(t){throw e("SET_ERROR",t.message),t}}}},D={getDepartments(){return T.get("/department")},getDepartment(e){return T.get(`/department/${e}`)},createDepartment(e){return T.post("/department",e)},updateDepartment(e,t){return T.patch(`/department/${e}`,t)},deleteDepartment(e){return T.delete(`/department/${e}`)}},L={namespaced:!0,state:{departments:[],currentDepartment:null,loading:!1,error:null},getters:{departments:e=>e.departments,currentDepartment:e=>e.currentDepartment,loading:e=>e.loading,error:e=>e.error},mutations:{SET_DEPARTMENTS(e,t){e.departments=t},SET_CURRENT_DEPARTMENT(e,t){e.currentDepartment=t},ADD_DEPARTMENT(e,t){e.departments.push(t)},UPDATE_DEPARTMENT(e,t){const a=e.departments.findIndex((e=>e._id===t._id));-1!==a&&e.departments.splice(a,1,t)},REMOVE_DEPARTMENT(e,t){e.departments=e.departments.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_ERROR(e){e.error=null}},actions:{async fetchDepartments({commit:e}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const t=await D.getDepartments();console.log(t),e("SET_DEPARTMENTS",t.data.data.departments)}catch(t){throw e("SET_ERROR",t.response?.data?.message||"Failed to fetch departments"),t}finally{e("SET_LOADING",!1)}},async fetchDepartment({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await D.getDepartment(t);e("SET_CURRENT_DEPARTMENT",a.data.data.department)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch department"),a}finally{e("SET_LOADING",!1)}},async createDepartment({commit:e},t){console.log(t);try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await D.createDepartment(t);return e("ADD_DEPARTMENT",a.data.data.department),a.data.data.department}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to create department"),a}finally{e("SET_LOADING",!1)}},async updateDepartment({commit:e},{id:t,departmentData:a}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const r=await D.updateDepartment(t,a);return e("UPDATE_DEPARTMENT",r.data.data.department),r.data.data.department}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to update department"),r}finally{e("SET_LOADING",!1)}},async deleteDepartment({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR"),await D.deleteDepartment(t),e("REMOVE_DEPARTMENT",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to delete department"),a}finally{e("SET_LOADING",!1)}}}},y={getCourses(){return T.get("/course")},getCourse(e){return T.get(`/course/${e}`)},createCourse(e){return T.post("/course",e)},updateCourse(e,t){return T.patch(`/course/${e}`,t)},deleteCourse(e){return T.delete(`/course/${e}`)}},b={namespaced:!0,state:{courses:[],currentCourse:null,loading:!1,error:null},getters:{courses:e=>e.courses,currentCourse:e=>e.currentCourse,loading:e=>e.loading,error:e=>e.error},mutations:{SET_COURSES(e,t){e.courses=t},SET_CURRENT_COURSE(e,t){e.currentCourse=t},ADD_COURSE(e,t){e.courses.push(t)},UPDATE_COURSE(e,t){const a=e.courses.findIndex((e=>e._id===t._id));-1!==a&&e.courses.splice(a,1,t)},REMOVE_COURSE(e,t){e.courses=e.courses.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_ERROR(e){e.error=null}},actions:{async fetchCourses({commit:e}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const t=await y.getCourses();console.log(t),e("SET_COURSES",t.data.data.courses)}catch(t){throw e("SET_ERROR",t.response?.data?.message||"Failed to fetch courses"),t}finally{e("SET_LOADING",!1)}},async fetchCourse({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await y.getCourse(t);e("SET_CURRENT_COURSE",a.data.data.course)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch course"),a}finally{e("SET_LOADING",!1)}},async fetchCourseByName({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await y.getCourseByName(t);e("SET_CURRENT_COURSE",a.data.data.course)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch course"),a}finally{e("SET_LOADING",!1)}},async createCourse({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await y.createCourse(t);return e("ADD_COURSE",a.data.data.course),a.data.data.course}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to create course"),a}finally{e("SET_LOADING",!1)}},async updateCourse({commit:e},{id:t,courseData:a}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const r=await y.updateCourse(t,a);return e("UPDATE_COURSE",r.data.data.course),r.data.data.course}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to update course"),r}finally{e("SET_LOADING",!1)}},async deleteCourse({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR"),await y.deleteCourse(t),e("REMOVE_COURSE",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to delete course"),a}finally{e("SET_LOADING",!1)}}}},N={getAllSubjects(){return T.get("/subject")},getSubject(e){return T.get(`/subject/${e}`)},createSubject(e){return T.post("/subject",e)},updateSubject(e,t){return T.patch(`/subject/${e}`,t)},deleteSubject(e){return T.delete(`/subject/${e}`)},getSubjectsByYearAndSemester(e,t){return T.get(`/subject/year/${e}/semester/${t}`)}},C={namespaced:!0,state:{subjects:[],currentSubject:null,loading:!1,error:null},getters:{subjects:e=>e.subjects,currentSubject:e=>e.currentSubject,loading:e=>e.loading,error:e=>e.error,subjectsByYear:e=>t=>e.subjects.filter((e=>e.yearLevel===t)),subjectsBySemester:e=>t=>e.subjects.filter((e=>e.semester===t)),subjectsByYearAndSemester:e=>(t,a)=>e.subjects.filter((e=>e.yearLevel===t&&e.semester===a))},mutations:{SET_SUBJECTS(e,t){e.subjects=t},SET_CURRENT_SUBJECT(e,t){e.currentSubject=t},ADD_SUBJECT(e,t){e.subjects.push(t)},UPDATE_SUBJECT(e,t){const a=e.subjects.findIndex((e=>e._id===t._id));-1!==a&&e.subjects.splice(a,1,t)},REMOVE_SUBJECT(e,t){e.subjects=e.subjects.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_ERROR(e){e.error=null}},actions:{async fetchSubjects({commit:e}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const t=await N.getAllSubjects();console.log(t),e("SET_SUBJECTS",t.data.data.subjects)}catch(t){throw e("SET_ERROR",t.response?.data?.message||"Failed to fetch subjects"),t}finally{e("SET_LOADING",!1)}},async fetchSubject({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await N.getSubject(t);e("SET_CURRENT_SUBJECT",a.data.data.subject)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch subject"),a}finally{e("SET_LOADING",!1)}},async createSubject({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await N.createSubject(t);return e("ADD_SUBJECT",a.data.data.subject),a.data.data.subject}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to create subject"),a}finally{e("SET_LOADING",!1)}},async updateSubject({commit:e},{id:t,subjectData:a}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const r=await N.updateSubject(t,a);return e("UPDATE_SUBJECT",r.data.data.subject),r.data.data.subject}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to update subject"),r}finally{e("SET_LOADING",!1)}},async deleteSubject({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR"),await N.deleteSubject(t),e("REMOVE_SUBJECT",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to delete subject"),a}finally{e("SET_LOADING",!1)}},async fetchSubjectsByYearAndSemester({commit:e},{yearLevel:t,semester:a}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const r=await N.getSubjectsByYearAndSemester(t,a);e("SET_SUBJECTS",r.data.data.subjects)}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to fetch subjects by year and semester"),r}finally{e("SET_LOADING",!1)}}}},I=(a(6573),a(8100),a(7936),a(7467),a(4732),a(9577),a(4979),{createStudent(e){const t=new FormData;if(e.image){const a=e.image.split(",")[1],r=this.dataURLtoBlob(a);t.append("image",r,"profile.jpg")}return Object.keys(e).forEach((a=>{"image"!==a&&("object"===typeof e[a]?t.append(a,JSON.stringify(e[a])):t.append(a,e[a]))})),T.post("/student",t,{headers:{"Content-Type":"multipart/form-data"}})},updateStudent(e,t){const a=new FormData;if(t.image){const e=t.image.split(",")[1],r=this.dataURLtoBlob(e);a.append("image",r,"profile.jpg")}return Object.keys(t).forEach((e=>{"image"!==e&&("object"===typeof t[e]?a.append(e,JSON.stringify(t[e])):a.append(e,t[e]))})),T.patch(`/student/${e}`,a,{headers:{"Content-Type":"multipart/form-data"}})},getAllStudents(e){return T.get("/student")},getStudent(e){return T.get(`/student/${e}`)},dataURLtoBlob(e){const t=e.split(","),a=t[0].match(/:(.*?);/)[1],r=atob(t[1]);let s=r.length;const n=new Uint8Array(s);while(s--)n[s]=r.charCodeAt(s);return new Blob([n],{type:a})}}),w={namespaced:!0,state:{students:[],currentStudent:null,loading:!1,error:null},getters:{students:e=>e.students,currentStudent:e=>e.currentStudent,loading:e=>e.loading,error:e=>e.error},mutations:{SET_STUDENTS(e,t){console.log(t),e.students=t},SET_CURRENT_STUDENT(e,t){e.currentStudent=t},ADD_STUDENT(e,t){e.students.push(t)},UPDATE_STUDENT(e,t){const a=e.students.findIndex((e=>e._id===t._id));-1!==a&&e.students.splice(a,1,t)},REMOVE_STUDENT(e,t){e.students=e.students.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_ERROR(e){e.error=null}},actions:{async fetchStudents({commit:e}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const t=await I.getAllStudents();console.log(t),e("SET_STUDENTS",t.data.data.students)}catch(t){throw e("SET_ERROR",t.response?.data?.message||"Failed to fetch students"),t}finally{e("SET_LOADING",!1)}},async fetchStudent({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await I.getStudent(t);console.log(a),e("SET_CURRENT_STUDENT",a.data.data.student)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch student"),a}finally{e("SET_LOADING",!1)}},async createStudent({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await I.createStudent(t);return e("ADD_STUDENT",a.data.data.student),a.data.data.student}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to create student"),a}finally{e("SET_LOADING",!1)}},async updateStudent({commit:e},{id:t,studentData:a}){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const r=await I.updateStudent(t,a);return e("UPDATE_STUDENT",r.data.data.student),r.data.data.student}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to update student"),r}finally{e("SET_LOADING",!1)}},async deleteStudent({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR"),await I.deleteStudent(t),e("REMOVE_STUDENT",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to delete student"),a}finally{e("SET_LOADING",!1)}}}},U={getAllProfessors(){return T.get("/professor")},getProfessor(e){return T.get(`/professor/${e}`)},createProfessor(e){return T.post("/professor",e)},updateProfessor(e,t){return T.patch(`/professor/${e}`,t)},deleteProfessor(e){return T.delete(`/professor/${e}`)},getProfessorTeachingLoad(e){return T.get(`/professor/${e}/teaching-load`)}},G={namespaced:!0,state:{professors:[],currentProfessor:null,teachingLoad:null,totalProfessors:0,loading:!1,error:null},mutations:{SET_PROFESSORS(e,t){e.professors=t},SET_CURRENT_PROFESSOR(e,t){e.currentProfessor=t},SET_TEACHING_LOAD(e,t){e.teachingLoad=t},SET_TOTAL_PROFESSORS(e,t){e.totalProfessors=t},ADD_PROFESSOR(e,t){e.professors.push(t)},UPDATE_PROFESSOR(e,t){const a=e.professors.findIndex((e=>e._id===t._id));-1!==a&&e.professors.splice(a,1,t),e.currentProfessor?._id===t._id&&(e.currentProfessor=t)},REMOVE_PROFESSOR(e,t){e.professors=e.professors.filter((e=>e._id!==t)),e.currentProfessor?._id===t&&(e.currentProfessor=null)},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t}},actions:{async fetchProfessors({commit:e}){e("SET_LOADING",!0);try{const t=await U.getAllProfessors();e("SET_PROFESSORS",t.data.data.professors),e("SET_TOTAL_PROFESSORS",t.data.results)}catch(t){throw e("SET_ERROR",t.response?.data?.message),t}finally{e("SET_LOADING",!1)}},async fetchProfessor({commit:e},t){e("SET_LOADING",!0);try{const a=await U.getProfessor(t);return console.log(a),e("SET_CURRENT_PROFESSOR",a.data.data.professor),a.data.data.professor}catch(a){throw e("SET_ERROR",a.response?.data?.message),a}finally{e("SET_LOADING",!1)}},async fetchTeachingLoad({commit:e},t){e("SET_LOADING",!0);try{const a=await U.getProfessorTeachingLoad(t);return e("SET_TEACHING_LOAD",a.data.data.teachingLoad),a.data.data.teachingLoad}catch(a){throw e("SET_ERROR",a.response?.data?.message),a}finally{e("SET_LOADING",!1)}},async createProfessor({commit:e},t){e("SET_LOADING",!0);try{const a=await U.createProfessor(t);return e("ADD_PROFESSOR",a.data.data.professor),a.data.data.professor}catch(a){throw e("SET_ERROR",a.response?.data?.message),a}finally{e("SET_LOADING",!1)}},async updateProfessor({commit:e},{id:t,professorData:a}){e("SET_LOADING",!0);try{const r=await U.updateProfessor(t,a);return e("UPDATE_PROFESSOR",r.data.data.professor),r.data.data.professor}catch(r){throw e("SET_ERROR",r.response?.data?.message),r}finally{e("SET_LOADING",!1)}},async deleteProfessor({commit:e},t){e("SET_LOADING",!0);try{await U.deleteProfessor(t),e("REMOVE_PROFESSOR",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message),a}finally{e("SET_LOADING",!1)}}},getters:{getProfessorById:e=>t=>e.professors.find((e=>e._id===t)),getProfessorsByDepartment:e=>t=>e.professors.filter((e=>e.academicInfo.department===t)),getActiveFullTimeProfessors:e=>e.professors.filter((e=>"active"===e.accountStatus&&"full-time"===e.academicInfo.employmentStatus))}},P={getAllTeacherLoads(e={}){return T.get("/teacher-load",{params:e})},getTeacherLoadsForProfessor(e){return T.get(`/teacher-load/professor/${e}`)},getTeacherLoad(e){return T.get(`/teacher-load/${e}`)},createTeacherLoad(e){return T.post("/teacher-load",e)},updateTeacherLoad(e,t){return T.patch(`/teacher-load/${e}`,t)},deleteTeacherLoad(e){return T.delete(`/teacher-load/${e}`)},checkConflictSchedule(e){if(!e.professorId)throw new Error("Professor ID is required");return T.post("/teacher-load/check-conflicts",e)},getAvailableSubjects(e,t){return T.get("/teacher-load/available-subjects",{params:{academicYear:e,semester:t}})},updateTeacherLoadStudents(e,t){return T.patch(`/teacher-load/${e}/students`,t)}},j={namespaced:!0,state:{teacherLoads:[],currentTeacherLoad:null,loading:!1,error:null},mutations:{SET_TEACHER_LOADS(e,t){e.teacherLoads=t},SET_CURRENT_TEACHER_LOAD(e,t){e.currentTeacherLoad=t},ADD_TEACHER_LOAD(e,t){e.teacherLoads.push(t)},UPDATE_TEACHER_LOAD(e,t){const a=e.teacherLoads.findIndex((e=>e._id===t._id));-1!==a&&e.teacherLoads.splice(a,1,t)},REMOVE_TEACHER_LOAD(e,t){e.teacherLoads=e.teacherLoads.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t}},actions:{async fetchTeacherLoads({commit:e},t={}){e("SET_LOADING",!0);try{const a=await P.getAllTeacherLoads(t);return e("SET_TEACHER_LOADS",a.data.data.teacherLoads),a.data.data.teacherLoads}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch teacher loads"),a}finally{e("SET_LOADING",!1)}},async fetchProfessorTeacherLoads({commit:e},t){if(t){e("SET_LOADING",!0);try{const a=await P.getTeacherLoadsForProfessor(t);return e("SET_TEACHER_LOADS",a.data.data.teacherLoads),a.data.data.teacherLoads}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch professor teaching loads"),a}finally{e("SET_LOADING",!1)}}},async fetchTeacherLoad({commit:e},t){if(t){e("SET_LOADING",!0);try{const a=await P.getTeacherLoad(t);return e("SET_CURRENT_TEACHER_LOAD",a.data.data.teacherLoad),a.data.data.teacherLoad}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch teacher load"),a}finally{e("SET_LOADING",!1)}}},async fetchAvailableSubjects({commit:e},{academicYear:t,semester:a}){e("SET_LOADING",!0);try{const e=await P.getAvailableSubjects(t,a);return e.data.data.subjects}catch(r){throw e("SET_ERROR",r.response?.data?.message),r}finally{e("SET_LOADING",!1)}},async createTeacherLoad({commit:e},t){e("SET_LOADING",!0);try{const a=await P.createTeacherLoad(t);return e("ADD_TEACHER_LOAD",a.data.data.teacherLoad),a.data.data.teacherLoad}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to create teacher load"),a}finally{e("SET_LOADING",!1)}},async updateTeacherLoad({commit:e},{id:t,data:a}){if(t){e("SET_LOADING",!0);try{const r=await P.updateTeacherLoad(t,a);return e("UPDATE_TEACHER_LOAD",r.data.data.teacherLoad),r.data.data.teacherLoad}catch(r){throw e("SET_ERROR",r.response?.data?.message||"Failed to update teacher load"),r}finally{e("SET_LOADING",!1)}}},async updateTeacherLoadStudents({commit:e},{teacherLoadId:t,data:a}){try{const e=await P.updateTeacherLoadStudents(t,a);return e.data}catch(r){throw console.error("Error updating teacher load students:",r),r}},async deleteTeacherLoad({commit:e},t){if(t){e("SET_LOADING",!0);try{await P.deleteTeacherLoad(t),e("REMOVE_TEACHER_LOAD",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to delete teacher load"),a}finally{e("SET_LOADING",!1)}}},async checkScheduleConflicts({commit:e},{schedule:t,skipSubjectId:a,professorId:r}){e("SET_LOADING",!0);try{const e=await P.checkConflictSchedule({schedule:t,skipSubjectId:a,professorId:r});return e.data.data}catch(s){throw e("SET_ERROR",s.response?.data?.message||"Failed to check schedule conflicts"),s}finally{e("SET_LOADING",!1)}}},getters:{getTeacherLoadById:e=>t=>e.teacherLoads.find((e=>e._id===t)),getLoadsBySemester:e=>(t,a)=>e.teacherLoads.filter((e=>e.academicYear===t&&e.semester===a)),getTotalUnitsBySemester:e=>(t,a)=>e.teacherLoads.filter((e=>e.academicYear===t&&e.semester===a)).reduce(((e,t)=>e+(t.totalUnits||0)),0)}},v={getSchedules(){return T.get("/class-schedule")},getSchedule(e){return T.get(`/class-schedule/${e}`)},getTeacherSchedule(e){return T.get(`/class-schedule/teacher/${e}`)},createSchedule(e){return T.post("/class-schedule",e)},updateSchedule(e,t){return T.patch(`/class-schedule/${e}`,t)},deleteSchedule(e){return T.delete(`/class-schedule/${e}`)}},F={namespaced:!0,state:{schedules:[],totalSchedules:0,loading:!1,error:null,teacherSchedules:[],groupedSchedules:{}},mutations:{SET_SCHEDULES(e,t){e.schedules=t},SET_TOTAL_SCHEDULES(e,t){e.totalSchedules=t},SET_TEACHER_SCHEDULES(e,t){e.teacherSchedules=t.rawSchedules||[],e.groupedSchedules=t.groupedSchedules||{}},ADD_SCHEDULE(e,t){e.schedules.push(t)},UPDATE_SCHEDULE(e,t){const a=e.schedules.findIndex((e=>e._id===t._id));-1!==a&&e.schedules.splice(a,1,t)},REMOVE_SCHEDULE(e,t){e.schedules=e.schedules.filter((e=>e._id!==t))},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},RESET_STATE(e){e.teacherSchedules=[],e.groupedSchedules={},e.error=null}},actions:{async fetchSchedules({commit:e}){e("SET_LOADING",!0);try{const t=await v.getSchedules();e("SET_SCHEDULES",t.data.data.schedules),e("SET_TOTAL_SCHEDULES",t.data.results)}catch(t){throw e("SET_ERROR",t.response?.data?.message),t}finally{e("SET_LOADING",!1)}},async fetchTeacherSchedules({commit:e},t){e("SET_LOADING",!0),e("SET_ERROR",null);try{const a=await v.getTeacherSchedule(t);e("SET_TEACHER_SCHEDULES",a.data.data.schedule)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch schedules"),a}finally{e("SET_LOADING",!1)}},async createSchedule({commit:e},t){e("SET_LOADING",!0);try{const a=await v.createSchedule(t);return e("ADD_SCHEDULE",a.data.data.schedule),a.data.data.schedule}catch(a){throw e("SET_ERROR",a.response?.data?.message),a}finally{e("SET_LOADING",!1)}},async updateSchedule({commit:e},{id:t,scheduleData:a}){e("SET_LOADING",!0);try{const r=await v.updateSchedule(t,a);return e("UPDATE_SCHEDULE",r.data.data.schedule),r.data.data.schedule}catch(r){throw e("SET_ERROR",r.response?.data?.message),r}finally{e("SET_LOADING",!1)}},async deleteSchedule({commit:e},t){e("SET_LOADING",!0);try{await v.deleteSchedule(t),e("REMOVE_SCHEDULE",t)}catch(a){throw e("SET_ERROR",a.response?.data?.message),a}finally{e("SET_LOADING",!1)}}},getters:{getSchedulesByDay:e=>t=>(console.log(t),e.groupedSchedules[t]||[]),hasSchedules:e=>e.teacherSchedules.length>0,isLoading:e=>e.loading,getError:e=>e.error}},k={getScheduleReports(e){return T.get("/report/class-schedules",{params:e})}},B={namespaced:!0,state:{scheduleReports:{data:[],total:0},loading:!1,error:null,filters:{course:null,subject:null,teacher:null,weekDay:null,startTime:null,endTime:null}},mutations:{SET_SCHEDULE_REPORTS(e,{schedules:t,total:a}){e.scheduleReports.data=t,e.scheduleReports.total=a},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},SET_FILTERS(e,t){e.filters={...e.filters,...t}},RESET_FILTERS(e){e.filters={course:null,subject:null,teacher:null,weekDay:null,startTime:null,endTime:null}}},actions:{async fetchScheduleReports({commit:e,state:t}){e("SET_LOADING",!0),e("SET_ERROR",null);try{const a={};t.filters.course&&(a.course=t.filters.course),t.filters.subject&&(a.subject=t.filters.subject),t.filters.teacher&&(a.teacher=t.filters.teacher._id||t.filters.teacher),t.filters.weekDay&&(a.weekDay=t.filters.weekDay),t.filters.startTime&&(a.startTime=t.filters.startTime),t.filters.endTime&&(a.endTime=t.filters.endTime);const r=await k.getScheduleReports(a);e("SET_SCHEDULE_REPORTS",{schedules:r.data.data.schedules,total:r.data.data.total})}catch(a){throw console.error("Report fetch error:",a),e("SET_ERROR",a.response?.data?.message||"Failed to fetch schedule reports"),a}finally{e("SET_LOADING",!1)}},updateFilters({commit:e,dispatch:t},a){const r={course:a.course,subject:a.subject,teacher:a.teacher?._id||a.teacher,weekDay:a.weekDay,startTime:a.startTime,endTime:a.endTime};return e("SET_FILTERS",r),t("fetchScheduleReports")},resetFilters({commit:e,dispatch:t}){return e("RESET_FILTERS"),t("fetchScheduleReports")}},getters:{getScheduleReports:e=>e.scheduleReports.data,getTotalReports:e=>e.scheduleReports.total,getLoading:e=>e.loading,getError:e=>e.error,getFilters:e=>e.filters}},$={enrollNewStudent(e){return T.post("/enrollment/new-student",e)},enrollContinuingStudent({studentId:e,enrollmentData:t}){return T.post(`/enrollment/continuing-student/${e}`,t)},addSubjects(e,t){return T.post(`/enrollment/${e}/subjects`,{subjects:t})},dropSubject(e,t){return T.patch(`/enrollment/${e}/subjects/${t}/drop`)},getStudentEnrollments(e){return T.get(`/enrollment/student/${e}`)},getEnrollmentDetails(e){return T.get(`/enrollment/${e}`)},updatePayment(e,t){return T.post(`/enrollment/${e}/payment`,t)}},M={namespaced:!0,state:{enrollments:[],currentEnrollment:null,loading:!1,error:null},getters:{enrollments:e=>e.enrollments,currentEnrollment:e=>e.currentEnrollment,loading:e=>e.loading,error:e=>e.error},mutations:{SET_ENROLLMENTS(e,t){e.enrollments=t},SET_CURRENT_ENROLLMENT(e,t){e.currentEnrollment=t},ADD_ENROLLMENT(e,t){e.enrollments.push(t)},UPDATE_ENROLLMENT(e,t){const a=e.enrollments.findIndex((e=>e._id===t._id));-1!==a&&e.enrollments.splice(a,1,t)},SET_LOADING(e,t){e.loading=t},SET_ERROR(e,t){e.error=t},CLEAR_ERROR(e){e.error=null}},actions:{async enrollNewStudent({dispatch:e},{studentData:t,enrollmentData:a}){try{const e=await $.enrollNewStudent({studentData:t,enrollmentData:a});return e.data}catch(r){throw console.error("Error enrolling new student:",r),r}},async enrollContinuingStudent({dispatch:e},{studentId:t,enrollmentData:a}){console.log(t,a);try{const e=await $.enrollContinuingStudent({studentId:t,enrollmentData:a});return e.data}catch(r){throw console.error("Error enrolling continuing student:",r),r}},async fetchStudentEnrollments({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await $.getStudentEnrollments(t);e("SET_ENROLLMENTS",a.data.data.enrollments)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch enrollments"),a}finally{e("SET_LOADING",!1)}},async fetchEnrollmentDetails({commit:e},t){try{e("SET_LOADING",!0),e("CLEAR_ERROR");const a=await $.getEnrollmentDetails(t);e("SET_CURRENT_ENROLLMENT",a.data.data.enrollment)}catch(a){throw e("SET_ERROR",a.response?.data?.message||"Failed to fetch enrollment details"),a}finally{e("SET_LOADING",!1)}}}};r.Ay.use(R.Ay);var H=new R.Ay.Store({modules:{auth:p,users:g,dashboard:A,departments:L,courses:b,subjects:C,students:w,teacherLoad:j,professors:G,schedules:F,reports:B,enrollments:M}});r.Ay.use(E.Ay);const x=[{path:"/login",name:"Login",component:()=>Promise.all([a.e(516),a.e(314),a.e(803)]).then(a.bind(a,8803)),meta:{guest:!0}},{path:"/",component:()=>Promise.all([a.e(516),a.e(399),a.e(237),a.e(561)]).then(a.bind(a,2096)),meta:{requiresAuth:!0},children:[{path:"",redirect:"/dashboard"},{path:"/dashboard",name:"Dashboard",component:()=>Promise.all([a.e(516),a.e(93),a.e(391)]).then(a.bind(a,2391))},{path:"/users",name:"Users",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(851)]).then(a.bind(a,1878))},{path:"/profile",name:"Profile",component:()=>Promise.all([a.e(516),a.e(314),a.e(284)]).then(a.bind(a,1284))},{path:"/academics/departments",name:"Departments",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(665)]).then(a.bind(a,9804))},{path:"/academics/courses",name:"Courses",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(77)]).then(a.bind(a,2584))},{path:"/academics/subjects",name:"Subjects",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(765)]).then(a.bind(a,8864))},{path:"/academics/schedules",name:"Schedules",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(93),a.e(352)]).then(a.bind(a,6269))},{path:"/students",name:"StudentList",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(398)]).then(a.bind(a,9323))},{path:"/students/:action(add|edit|view)",name:"StudentForm",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(531),a.e(557),a.e(389)]).then(a.bind(a,7274)),props:!0},{path:"/students/:id/profile",name:"Student Profile",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(93),a.e(448)]).then(a.bind(a,5181))},{path:"/teachers",name:"Teacchers",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(93),a.e(531),a.e(178)]).then(a.bind(a,5025))},{path:"/teachers/:id/class-schedule",name:"Class Schedule",component:()=>Promise.all([a.e(516),a.e(399),a.e(93),a.e(216)]).then(a.bind(a,7648))},{path:"/professor/:id/profile",name:"Teacher Profile",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(896),a.e(93),a.e(450)]).then(a.bind(a,5463))},{path:"/enrollment",name:"Enrollment",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(93),a.e(531),a.e(557),a.e(859)]).then(a.bind(a,4700))},{path:"/reports",component:()=>Promise.all([a.e(516),a.e(373)]).then(a.bind(a,5373)),children:[{path:"",name:"Reports"},{path:"teachers",name:"TeacherReport",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(51)]).then(a.bind(a,2415)),meta:{title:"Teacher Reports",requiresAuth:!0}},{path:"students",name:"StudentReport",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(378)]).then(a.bind(a,3394)),meta:{title:"Student Reports",requiresAuth:!0}},{path:"schedules",name:"ScheduleReport",component:()=>Promise.all([a.e(516),a.e(314),a.e(399),a.e(237),a.e(442),a.e(64),a.e(93),a.e(497)]).then(a.bind(a,7057)),meta:{title:"Class Schedule Reports",requiresAuth:!0}}]}]}],V=new E.Ay({mode:"history",base:"/",routes:x});V.beforeEach(((e,t,a)=>{const r=e.matched.some((e=>e.meta.requiresAuth)),s=H.getters["auth/isAuthenticated"];console.log(r,s),console.log("auth"),r&&!s?a("/login"):e.meta.guest&&s?a("/dashboard"):a()}));var J=V,Y=a(3971);r.Ay.use(Y.A);var q=new Y.A({theme:{themes:{light:{brown:"#a52a2a",firebrick:"#b22222",chocolate:"#d2691e",sandybrown:"#f4a460",tan:"#d2b48c",primary:"#a52a2a",secondary:"#b22222",accent:"#d2691e",info:"#f4a460",warning:"#d2b48c"}},options:{customProperties:!0}},icons:{iconfont:"mdi"}}),K=a(7588),W=a.n(K);r.Ay.config.productionTip=!1,r.Ay.use(W()),r.Ay.component("apexchart",W()),new r.Ay({router:J,store:H,vuetify:q,render:e=>e(i)}).$mount("#app")}},t={};function a(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(n.exports,n,n.exports,a),n.loaded=!0,n.exports}a.m=e,function(){var e=[];a.O=function(t,r,s,n){if(!r){var o=1/0;for(u=0;u<e.length;u++){r=e[u][0],s=e[u][1],n=e[u][2];for(var c=!0,d=0;d<r.length;d++)(!1&n||o>=n)&&Object.keys(a.O).every((function(e){return a.O[e](r[d])}))?r.splice(d--,1):(c=!1,n<o&&(o=n));if(c){e.splice(u--,1);var l=s();void 0!==l&&(t=l)}}return t}n=n||0;for(var u=e.length;u>0&&e[u-1][2]>n;u--)e[u]=e[u-1];e[u]=[r,s,n]}}(),function(){a.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return a.d(t,{a:t}),t}}(),function(){a.d=function(e,t){for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}}(),function(){a.f={},a.e=function(e){return Promise.all(Object.keys(a.f).reduce((function(t,r){return a.f[r](e,t),t}),[]))}}(),function(){a.u=function(e){return"js/"+e+"."+{51:"e6fc6cd6",64:"b91cc39b",77:"82b3175c",93:"ff3f344e",178:"39c7ab3b",216:"45feb354",237:"5f38f5f1",284:"a6c931e9",314:"2c16f4b4",352:"7d8e56ad",373:"4d0963c0",378:"61404699",389:"cef36c9f",391:"c280a246",398:"2a52bea2",399:"853f6179",442:"46d6ac70",448:"3080c433",450:"36e07a8a",497:"9b404ce2",516:"069ef981",531:"a1a3f523",557:"9dbd9cc3",561:"a0bc3ded",665:"644334aa",765:"9ba86e53",803:"a1ea8d57",851:"a5e0cf4f",859:"01d7a94a",896:"e58b76ab"}[e]+".js"}}(),function(){a.miniCssF=function(e){return"css/"+e+"."+{51:"06fcd488",77:"dd676342",178:"89f4a8fe",216:"fd9e7df3",284:"1fcb36d5",314:"2dcb397c",352:"145aba77",373:"b5219025",378:"81a0668d",389:"e0f5cbf5",391:"d28014c9",398:"0576a606",442:"04803662",448:"b10b9fde",450:"b49adb15",497:"190a3775",516:"3fb86192",561:"5f714dc2",665:"cb349691",765:"bf2ef973",803:"44e02de1",851:"356179e8",859:"9e43cd02"}[e]+".css"}}(),function(){a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={},t="client:";a.l=function(r,s,n,o){if(e[r])e[r].push(s);else{var c,d;if(void 0!==n)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var i=l[u];if(i.getAttribute("src")==r||i.getAttribute("data-webpack")==t+n){c=i;break}}c||(d=!0,c=document.createElement("script"),c.charset="utf-8",c.timeout=120,a.nc&&c.setAttribute("nonce",a.nc),c.setAttribute("data-webpack",t+n),c.src=r),e[r]=[s];var E=function(t,a){c.onerror=c.onload=null,clearTimeout(R);var s=e[r];if(delete e[r],c.parentNode&&c.parentNode.removeChild(c),s&&s.forEach((function(e){return e(a)})),t)return t(a)},R=setTimeout(E.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=E.bind(null,c.onerror),c.onload=E.bind(null,c.onload),d&&document.head.appendChild(c)}}}(),function(){a.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){a.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e}}(),function(){a.p="/"}(),function(){if("undefined"!==typeof document){var e=function(e,t,r,s,n){var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",a.nc&&(o.nonce=a.nc);var c=function(a){if(o.onerror=o.onload=null,"load"===a.type)s();else{var r=a&&a.type,c=a&&a.target&&a.target.href||t,d=new Error("Loading CSS chunk "+e+" failed.\n("+r+": "+c+")");d.name="ChunkLoadError",d.code="CSS_CHUNK_LOAD_FAILED",d.type=r,d.request=c,o.parentNode&&o.parentNode.removeChild(o),n(d)}};return o.onerror=o.onload=c,o.href=t,r?r.parentNode.insertBefore(o,r.nextSibling):document.head.appendChild(o),o},t=function(e,t){for(var a=document.getElementsByTagName("link"),r=0;r<a.length;r++){var s=a[r],n=s.getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(n===e||n===t))return s}var o=document.getElementsByTagName("style");for(r=0;r<o.length;r++){s=o[r],n=s.getAttribute("data-href");if(n===e||n===t)return s}},r=function(r){return new Promise((function(s,n){var o=a.miniCssF(r),c=a.p+o;if(t(o,c))return s();e(r,c,null,s,n)}))},s={524:0};a.f.miniCss=function(e,t){var a={51:1,77:1,178:1,216:1,284:1,314:1,352:1,373:1,378:1,389:1,391:1,398:1,442:1,448:1,450:1,497:1,516:1,561:1,665:1,765:1,803:1,851:1,859:1};s[e]?t.push(s[e]):0!==s[e]&&a[e]&&t.push(s[e]=r(e).then((function(){s[e]=0}),(function(t){throw delete s[e],t})))}}}(),function(){var e={524:0};a.f.j=function(t,r){var s=a.o(e,t)?e[t]:void 0;if(0!==s)if(s)r.push(s[2]);else{var n=new Promise((function(a,r){s=e[t]=[a,r]}));r.push(s[2]=n);var o=a.p+a.u(t),c=new Error,d=function(r){if(a.o(e,t)&&(s=e[t],0!==s&&(e[t]=void 0),s)){var n=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;c.message="Loading chunk "+t+" failed.\n("+n+": "+o+")",c.name="ChunkLoadError",c.type=n,c.request=o,s[1](c)}};a.l(o,d,"chunk-"+t,t)}},a.O.j=function(t){return 0===e[t]};var t=function(t,r){var s,n,o=r[0],c=r[1],d=r[2],l=0;if(o.some((function(t){return 0!==e[t]}))){for(s in c)a.o(c,s)&&(a.m[s]=c[s]);if(d)var u=d(a)}for(t&&t(r);l<o.length;l++)n=o[l],a.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return a.O(u)},r=self["webpackChunkclient"]=self["webpackChunkclient"]||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))}();var r=a.O(void 0,[504],(function(){return a(6481)}));r=a.O(r)})();
//# sourceMappingURL=app.9ad1491b.js.map